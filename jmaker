#!/usr/bin/env python2
"""
A script to render text from Jinja2 templates + input data.
"""
import argparse
import os
import random
import shutil
import sys
import time

import jinja2
import yaml

__author__ = "Greg Stilwell"


def eprint(msg, newline="\n"):
    """Print to stderr, so redirects (>) only capture program output,
    and not informational user messages.  Also Python3 friendly."""
    sys.stderr.write("{}{}".format(msg, newline))


class Jrenderer:
    """A renderer for Jinja2 templates."""

    def __init__(self, template_dir="."):
        """Configure Jinja2 environment.

        Args:
            template_dir (str): path to Jinja2 templates
        """
        home_templates = os.path.join(os.path.expanduser("~"), "templates")
        tdirs = [template_dir, home_templates]
        self.env = jinja2.Environment()
        # load templates into environment
        self.env.loader = jinja2.FileSystemLoader(tdirs)
        # trim_blocks: If True, the first newline after a block is removed
        self.env.trim_blocks = True
        # lstrip_blocks: If True, leading spaces and tabs are stripped from the start of a line to a block
        self.env.lstrip_blocks = True
        # add function to use within templates
        self.env.globals.update({
            "EXrndstring": make_rndstring})

    def list_templates(self):
        eprint("Template search path:\n\t{}".format(self.env.loader.searchpath))
        eprint("Templates found:\n\t{}\n\n".format("\n\t".join(self.env.list_templates())))

    def render(self, template_name, variable_data):
        """Render template, using variable data to fill it in.

        Args:
            template_name (str): filename of Jinja2 template file to render
            variable_data (dict): data to pass to Jinja2 for filling in template variables
        """
        try:
            template = self.env.get_template(template_name)
        except jinja2.exceptions.TemplateNotFound:
            self.list_templates()
            raise
        rendered = template.render(variable_data)
        # check for weird unicode char's, set encoding to handle it
        try:
            str(rendered)
        except UnicodeEncodeError:
            rendered = rendered.encode(encoding='utf8')
        return rendered


def make_rndstring(length=32):
    """Generate a random string.

    Args:
        length (int): length of string to generate
    """
    lowercase = "abcdefghijklmnopqrstuvwxyz"
    uppercase = lowercase.upper()
    numbers = "0123456789"
    symbols = "!@#$%^*+="
    charset = lowercase + uppercase + numbers + symbols
    randchars = [random.choice(charset) for _ in xrange(length)]
    return "".join(randchars)


def load_yaml(yaml_filename):
    """Load data from a YAML file. (Note: also supports JSON)"""
    assert os.path.isfile(str(yaml_filename)), "YAML file not found: {}".format(yaml_filename)
    with open(yaml_filename) as f:
        yaml_data = yaml.load(f)
    return yaml_data


def parse_args(cli_args):
    """Parse command line arguments."""
    # print help message if no args
    if not cli_args:
        cli_args = ['-h']
    parser = argparse.ArgumentParser(description='Jinja2 template renderer.')
    parser.add_argument(
        'template', nargs="?", type=str,
        help='Name of Jinja2 template filename.')
    parser.add_argument(
        'datafile', nargs="?", type=str,
        help='Name of data file (YAML/JSON) to load for filling in variables in template.')
    parser.add_argument(
        '--altdir', type=str,
        help='Alternate directory to search for Jinja2 templates.')
    parser.add_argument(
        '--lt', dest='listtemplates', action="store_true",
        help='List templates found in template dir.')
    parser.add_argument(
        '--of', dest='outfile', type=str,
        help='Filename to save rendered output.')
    parser.add_argument(
        '--append', default=False, action="store_true",
        help='Append to output file; default is to overwrite.')
    parser.add_argument(
        '--safe', default=False, action="store_true",
        help='If output file exists, copy it to a backup first.')

    parsed_args = parser.parse_args(cli_args)
    return parsed_args


def write_file(fname, fdata, append=False, safe=False):
    """Write data to file.

    Args:
        fname (str): filename
        fdata (str): crap to write to file
        append (bool): True=append to file, False=overwrite file
        safe (bool): True=if file already exists, copy it to a backup first
    """
    assert isinstance(fdata, (str, unicode))
    if safe:
        backup_file(fname)
    if append:
        write_mode = "a"
    else:
        write_mode = "w"
    with open(fname, write_mode) as f:
        f.write(fdata)
    if append:
        eprint("Appended to file: {}".format(fname))
    else:
        eprint("Wrote to file: {}".format(fname))


def backup_file(fname):
    """If file exists, copy it to a backup filename (timestamped)."""
    if os.path.exists(fname):
        backup_fname = "{}.{}".format(fname, time.strftime("%Y%m%d-%H%M%S"))
        shutil.copy(fname, backup_fname)
        eprint("Existing file backed up to: {}".format(backup_fname))


if __name__ == "__main__":
    args = parse_args(sys.argv[1:])
    template_filepath = args.template
    # allow user to explicitly specify a different template dir to search for templates
    if args.altdir:
        TEMPLATE_DIR = args.altdir
        template_filename = template_filepath
    else:
        # auto-determine template dir from specified template path/file
        TEMPLATE_DIR, template_filename = os.path.split(os.path.abspath(template_filepath))

    renderer = Jrenderer(template_dir=TEMPLATE_DIR)
    if args.listtemplates:
        renderer.list_templates()
        exit()

    fill_data = load_yaml(args.datafile)
    rendered_text = renderer.render(template_filename, fill_data)

    if args.outfile:
        outdir = os.path.split(os.path.abspath(args.outfile))[0]
        # Create output directory if doesn't exist yet
        if not os.path.exists(outdir):
            os.makedirs(outdir)
        write_file(args.outfile, rendered_text, append=args.append, safe=args.safe)
    else:
        print(rendered_text)
